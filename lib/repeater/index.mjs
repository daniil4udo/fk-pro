import {
    createSectionFactory as e,
    createBaseSections as t,
} from '../index.mjs';
const n = /* #__PURE__ */ e('rp'),
    {
        outer: i,
        inner: l,
        prefix: o,
        suffix: r,
        help: d,
        messages: $,
        message: a,
        icon: s,
    } = /* #__PURE__ */ t(n),
    u = n('empty', () => ({ $el: 'div' })),
    m = n('insertControl', () => ({
        $el: 'button',
        attrs: {
            disabled: '$value.length >= $max',
            onClick: '$fns.createInsert($index)',
            type: 'button',
        },
    })),
    f = n('addButton', () => ({
        $formkit: 'button',
        bind: '$addAttrs',
        if: '$addButton',
        disabled: '$value.length >= $max',
        onClick: '$fns.createAppend()',
        type: 'button',
    })),
    p = n('removeControl', () => ({
        $el: 'button',
        attrs: {
            disabled: '$value.length <= $min',
            onClick: '$fns.createRemover($index)',
            type: 'button',
        },
    })),
    b = n('items', () => ({
        $el: 'ul',
        meta: { autoAnimate: !0 },
        attrs: { role: 'list', id: '$id + "_items"' },
    })),
    C = n('item', () => ({
        $el: 'li',
        for: ['item', 'index', '$items'],
        attrs: { role: 'listitem', key: '$item', 'data-index': '$index' },
    })),
    c = n('downControl', () => ({
        $el: 'button',
        attrs: {
            disabled: '$index >= $value.length - 1',
            onClick: '$fns.createShift($index, 1)',
            type: 'button',
        },
    })),
    x = n('upControl', () => ({
        $el: 'button',
        attrs: {
            disabled: '$index <= 0',
            onClick: '$fns.createShift($index, -1)',
            type: 'button',
        },
    })),
    g = n('content', 'div'),
    v = n('fieldset', () => ({ $el: 'fieldset', attrs: { id: '$id' } })),
    h = n('legend', () => ({ $el: 'legend', if: '$label' })),
    info = n('info', 'div'),
    k = n('group', () => ({ $formkit: 'group', index: '$index' })),
    y = n('controls', () => ({
        $el: 'ul',
        if: '$removeControl || $insertControl || $upControl || $downControl',
    })),
    w = n('remove', () => ({ $el: 'li', if: '$removeControl' })),
    A = n('insert', () => ({ $el: 'li', if: '$insertControl' })),
    _ = n('up', () => ({ $el: 'li', if: '$upControl' })),
    B = n('down', () => ({ $el: 'li', if: '$downControl' })),
    H = n('controlLabel', 'span'),
    S = n('dragHandleWrapper', () => ({ if: '$draggable', $el: 'div' })),
    I = n('dragHandle', () => ({
        $el: 'div',
        attrs: { id: '$id + "_drag_handle"' },
    }));
export {
    f as addButton,
    g as content,
    H as controlLabel,
    y as controls,
    n as createSection,
    B as down,
    c as downControl,
    I as dragHandle,
    S as dragHandleWrapper,
    u as empty,
    v as fieldset,
    k as group,
    d as help,
    s as icon,
    l as inner,
    A as insert,
    m as insertControl,
    C as item,
    b as items,
    h as legend,
    info as info,
    a as message,
    $ as messages,
    i as outer,
    o as prefix,
    w as remove,
    p as removeControl,
    r as suffix,
    _ as up,
    x as upControl,
};
